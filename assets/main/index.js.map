{"version":3,"sources":["../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/ActQuiz.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/ChoicesModal.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/file:/Users/takeda.naomichi/QuizTest/assets/Script/GameScene.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/DataBase/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/DataBase/GestureData.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/DataBase/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/DataBase/GestureDataBase.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/GestureQuiz.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/PersonalQuiz.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Phase/file:/Users/takeda.naomichi/QuizTest/assets/Script/Phase/PhaseBase.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/QuestionModal.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Phase/file:/Users/takeda.naomichi/QuizTest/assets/Script/Phase/QuestionPhase.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/QuizComponent.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/QuizManager.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Manager/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Manager/QuizModalManager.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/file:/Users/takeda.naomichi/QuizTest/assets/Script/Quiz/Modal/ResultModal.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/System/file:/Users/takeda.naomichi/QuizTest/assets/Script/System/Singleton.ts","../../file:/Users/takeda.naomichi/QuizTest/assets/Script/file:/Users/takeda.naomichi/QuizTest/assets/Script/TestMenu.ts"],"names":["ccclass","_decorator","property","_inheritsLoose","_proto","start","update","deltaTime","Component","Button","Label","Sprite","ResultModal","args","_this","_initializerDefineProperty","choiceNumber","buttonList","node","on","EventType","CLICK","Choice","this","index","active","resultModal","SetChoices","text","sprite","labelList","string","spriteList","spriteFrame","GetChoics","configurable","enumerable","writable","initializer","Array","Number","QuizManager","GestureQuiz","quizManager","OnUpdate","GameStart","quiz","Initialize","gameStart","SetQuiz","GetRandMax","randMax","mSprite","QuizData","SpriteFrame","data","i","temp","GestureData","mAnswer","mIndex","Add","push","GetAllData","GetData","GestureDataBase","mData","dataList","DecisionAnswer","questionModal","SetNumber","mNumber","SetSentence","mSentence","SetSprite","select","choicesModal","tempdata","result","n","length","SetAnswerLabel","SetAnswerSprite","_QuizComponent","Reset","mType","math","randomRangeInt","QuizComponent","Node","qStartB","nextModal","num","qNumber","toString","sent","qSentence","SetSelect","sele","qSelect","qSpriteFrame","qtype","qImageFrame","qSelectB","forEach","element","setPosition","Vec3","QuestionModal","Instance","ChoicesModal","GetQuizData","answerData","instance","startButton","QuestionPhase","AnswerPhase","isReStart","quizComponent","SetInfo","Prefab","question","choices","QuizModalManager","instantiate","questionPrefab","setParent","canvas","getComponent","choicesPrefab","resultPrefab","ChangeModal","nextType","GetQuestionModal","GetChoicesModal","GetResultModal","nextButton","choice","resultLabel","color","Color","answerSprite","ansnum","label","answerLabel","Singleton","button","ClickFunction","name","modal"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ActQuiz')\nexport class ActQuiz extends Component {\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n","import { _decorator, Component, Node, Button, Label, SpriteFrame, Sprite } from 'cc';\nimport { ResultModal } from './ResultModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ChoicesModal')\nexport class ChoicesModal extends Component {\n\n    @property(Button)\n    buttonList : Array<Button> = new Array<Button>();\n    @property(Label)\n    labelList : Array<Label> = new Array<Label>();\n    @property(Sprite)\n    spriteList : Array<Sprite> = new Array<Sprite>();\n    @property(ResultModal)\n    resultModal : ResultModal = null;\n\n    choiceNumber : number = -1;\n\n    start() {\n        this.buttonList[0].node.on(Button.EventType.CLICK, function(){this.Choice(0);}, this);\n        this.buttonList[1].node.on(Button.EventType.CLICK, function(){this.Choice(1);}, this);\n        this.buttonList[2].node.on(Button.EventType.CLICK, function(){this.Choice(2);}, this);\n        this.buttonList[3].node.on(Button.EventType.CLICK, function(){this.Choice(3);}, this);\n        this.buttonList[4].node.on(Button.EventType.CLICK, function(){this.Choice(4);}, this);\n        this.buttonList[5].node.on(Button.EventType.CLICK, function(){this.Choice(5);}, this);\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    private Choice(index : number) {\n        this.choiceNumber = index;\n        this.node.active = false;\n        this.resultModal.node.active = true;\n    }\n\n    public SetChoices(index : number, text : string, sprite : SpriteFrame){\n        this.labelList[index].string = text;\n        this.spriteList[index].spriteFrame = sprite;\n    }\n\n    public GetChoics() : number{\n        return this.choiceNumber;\n    }\n}\n\n","import { _decorator, Component, Node, Button } from 'cc';\nimport { GestureQuiz } from './Quiz/GestureQuiz';\nimport { QuizManager } from './Quiz/QuizManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameScene')\nexport class GameScene extends Component {\n\n    @property(Button)\n    gameStart : Button = null;\n    @property(Number)\n    randMax : number = 0;\n    @property(QuizManager)\n    quizManager : QuizManager = null;\n\n    @property(GestureQuiz)\n    quiz : GestureQuiz = null;\n\n    start() {\n        // this.gameStart.node.on(Button.EventType.CLICK, this.GameStart, this);\n    }\n\n    update(deltaTime: number) {\n        this.quizManager.OnUpdate();\n    }\n\n    private GameStart(){\n        this.quiz.Initialize();\n        this.gameStart.node.active = false;\n        this.quiz.SetQuiz();\n    }\n\n    public GetRandMax():number{\n        return this.randMax;\n    }\n}\n\n","import { _decorator, Component, Node, SpriteFrame } from 'cc';\nimport { QuizData } from '../QuizComponent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GestureData')\nexport class GestureData extends QuizData {\n\n    mSprite : SpriteFrame;\n}\n\n","import { _decorator, Component, Node, SpriteFrame } from 'cc';\nimport { GestureData } from './GestureData';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GestureDataBase')\nexport class GestureDataBase extends Component {\n\n    @property(SpriteFrame)\n    sprite : Array<SpriteFrame> = new Array<SpriteFrame>();\n\n    data : Array<GestureData> = new Array<GestureData>();\n\n    start(){\n        for(var i = 0; i < 6; i++){\n            var temp = new GestureData();\n            temp.mSprite = this.sprite[i];\n            temp.mAnswer = i;\n            temp.mIndex = i;\n            this.Add(temp);\n        }\n    }\n\n    public Add(data : GestureData){\n        this.data.push(data);\n    }\n\n    public GetAllData() : Array<GestureData>{\n        return this.data;\n    }\n\n    public GetData(index : number) : GestureData{\n        return this.data[index];\n    }\n\n}\n\n","import { _decorator, Component, Node, SpriteFrame, math, SphereColliderComponent } from 'cc';\nimport { GestureData } from './DataBase/GestureData';\nimport { GestureDataBase } from './DataBase/GestureDataBase';\nimport { QuizComponent, QuizData } from './QuizComponent';\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('GestureQuiz')\nexport class GestureQuiz extends QuizComponent {\n\n    @property(GestureDataBase)\n    dataList : GestureDataBase = null;\n\n    mSprite : SpriteFrame;  // 問題の画像\n    mData : GestureData;\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    public SetQuiz(){\n        // 問題文\n        this.mData = this.dataList.GetData(this.DecisionAnswer());\n        this.questionModal.SetNumber(++this.mNumber);\n        this.questionModal.SetSentence(this.mSentence = \"この顔を演じてください\");\n        this.questionModal.SetSprite(this.mSprite = this.mData.mSprite);\n\n\n        // 選択肢\n        var temp : Array<number> = [-1,-1,-1,-1,-1,-1];\n        for(var i : number = 0; i < 6; i++){\n            var select : string;\n            if(i === 0){select = \"A.\";}\n            else if(i === 1){select = \"B.\";}\n            else if(i === 2){select = \"C.\";}\n            else if(i === 3){select = \"D.\";}\n            else if(i === 4){select = \"E.\";}\n            else if(i === 5){select = \"F.\";}\n\n            if(i === this.mData.mAnswer){\n                this.choicesModal.SetChoices(i, select, this.mData.mSprite);\n                temp[i] = this.mData.mIndex;\n            }\n            else{\n                var tempdata : GestureData = null\n                do {\n                    tempdata = this.dataList.GetData(this.DecisionAnswer());\n                    var result : Boolean = false;\n                    for(var n = 0; n < temp.length; n++){\n                        if(tempdata.mIndex === this.mData.mIndex || temp[n] === tempdata.mIndex){\n                            result = false;\n                            break;\n                        }\n\n                        if(temp[n] === -1){\n                            temp[n] = tempdata.mIndex;\n                            result = true;\n                            break;\n                        }\n                    }\n                } while (!result);\n\n                this.choicesModal.SetChoices(i, select, tempdata.mSprite);\n            }\n        }\n\n        // 結果\n        this.resultModal.SetAnswerLabel(this.mData.mAnswer ,\"\");\n        this.resultModal.SetAnswerSprite(this.mSprite);\n    }\n\n    public Initialize(){\n        super.Reset();\n        this.questionModal.Initialize(this.mType = 'Gesture');\n        this.mSprite = null;  // 問題の画像\n        this.mData = null;\n    }\n\n    private DecisionAnswer() : number{\n        return math.randomRangeInt(0,this.dataList.GetAllData().length);\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PersonalQuiz')\nexport class PersonalQuiz extends Component {\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PhaseBase')\nexport class PhaseBase extends Component {\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n","import { _decorator, Component, Node, Label, Button, Vec2, Vec3, SpriteFrame, Sprite } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('QuestionModal')\nexport class QuestionModal extends Component {\n\n    @property(Label)\n    qNumber : Label = null;\n    @property(Label)\n    qSentence : Label = null;\n    @property(Label)\n    qSelect : Label = null;\n    @property(Node)\n    qImageFrame : Node = null;\n    @property(Sprite)\n    qSpriteFrame : Sprite = null;\n    @property(Button)\n    qStartB : Button = null;\n    @property(Button)\n    qSelectB : Array<Button> = new Array<Button>();\n\n    @property(Node)\n    nextModal : Node = null;\n\n    start() {\n        this.qStartB.node.on(Button.EventType.CLICK, function(){\n            this.nextModal.active = true;\n            this.node.active = false;\n        },this);\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    public SetNumber(num : number){\n        this.qNumber.string = \"第\" + num.toString() + \"問\"; \n    }\n\n    public SetSentence(sent : string){\n        this.qSentence.string = sent;\n    }\n\n    public SetSelect(sele : Array<string>){\n        for(const sent in sele){\n            this.qSelect.string += sent;\n        }\n    }\n\n    public SetSprite(sprite : SpriteFrame){\n        this.qSpriteFrame.spriteFrame = sprite;\n    }\n\n    public Initialize(qtype : string){\n\n        this.node.active = true;\n        this.qNumber.node.active = true;\n        this.qSentence.node.active = true;\n\n        this.qSelect.node.active = false;\n        this.qImageFrame.active = false;\n        this.qSpriteFrame.node.active = false;\n        this.qStartB.node.active = false;\n        this.qSelectB.forEach(element => {element.node.active = false;});\n\n        if(qtype === 'Gesture'){    // ジェスチャー\n            this.qSentence.node.setPosition(new Vec3(0,75,0));\n            this.qImageFrame.active = true;\n            this.qSpriteFrame.node.active = true;\n            this.qStartB.node.active = true;\n        }\n        else if(qtype === 'Act'){   // アクト\n            this.qSentence.node.setPosition(new Vec3(0,50,0));\n            this.qStartB.node.active = true;\n        }\n        else if(qtype === 'Quiz'){   // クイズ\n            this.qSentence.node.setPosition(new Vec3(0,75,0));\n            this.qSelect.node.active = true;\n            this.qSelectB.forEach(element => {element.node.active = true;});\n        }\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport { QuestionModal } from '../Quiz/Modal/QuestionModal';\nimport { QuizComponent } from '../Quiz/QuizComponent';\nimport { QuizManager } from '../Quiz/QuizManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('QuestionPhase')\nexport class QuestionPhase extends Component {\n\n    @property(QuestionModal)\n    modal : QuestionModal = null;\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    public Initialize(){\n        QuizManager.Instance()\n    }\n}\n\n","import { _decorator, Component, Node, Label, SpriteFrame } from 'cc';\nimport { GameScene } from '../GameScene';\nimport { ChoicesModal } from './Modal/ChoicesModal';\nimport { QuestionModal } from './Modal/QuestionModal';\nimport { ResultModal } from './Modal/ResultModal';\nconst { ccclass, property } = _decorator;\n\nconst QuizType = {\n    None    : 'None',\n    Gesture : 'Gesture',\n    Act     : 'Act',\n    Quiz    : 'Quiz',\n} as const;\n\nexport type QuizType = typeof QuizType[keyof typeof QuizType];\n\n@ccclass('QuizData')\nexport class QuizData{\n    mIndex : number;\n    mAnswer : number;\n}\n\n@ccclass('QuizComponent')\nexport abstract class QuizComponent extends Component {\n\n\n    @property(QuestionModal)\n    questionModal : QuestionModal = null;\n    @property(ChoicesModal)\n    choicesModal : ChoicesModal = null;\n    @property(ResultModal)\n    resultModal : ResultModal = null;\n\n    mType : QuizType;\n    mNumber : number;\n    mSentence : string;\n    abstract mData : QuizData;\n\n    public abstract Initialize() : void;\n    public abstract SetQuiz() : void;\n\n    public Reset(){\n        this.mType = 'None';\n        this.mNumber = 0;\n        this.mSentence = \"\";\n    }\n\n    public GetQuizData():QuizData{\n        return this.mData;\n    }\n}\n\n","import { _decorator, Component, Node, profiler, Button } from 'cc';\nimport { ChoicesModal } from './Modal/ChoicesModal';\nimport { QuestionModal } from './Modal/QuestionModal';\nimport { ResultModal } from './Modal/ResultModal';\nimport { QuizComponent, QuizData } from './QuizComponent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('QuizManager')\nexport class QuizManager extends Component {\n\n    private static instance : QuizManager;\n    \n\n    public static Instance() : QuizManager {\n        if(!QuizManager.instance){\n            QuizManager.instance = new QuizManager();\n        }\n\n        return QuizManager.instance;\n    }\n\n    @property(QuestionModal)\n    questionModal : QuestionModal = null;\n    @property(ChoicesModal)\n    choicesModal : ChoicesModal = null;\n    @property(ResultModal)\n    resultModal : ResultModal = null;\n    @property(QuizComponent)\n    quizComponent : QuizComponent = null;\n\n    @property(Button)\n    startButton : Button = null;\n\n    answerData : QuizData = null;\n\n    start(){\n        this.startButton.node.on(Button.EventType.CLICK, function(){\n            this.QuestionPhase();\n            this.startButton.node.active = false;\n        }, this);\n    }\n\n    public OnUpdate(){\n        this.AnswerPhase();\n\n        if(this.resultModal.isReStart){\n            this.quizComponent.SetQuiz();\n            this.resultModal.isReStart = false;\n        }\n    }\n\n    // 出題\n    private QuestionPhase(){\n        this.quizComponent.Initialize();\n        this.quizComponent.SetQuiz();\n    }\n\n    // \n    AnswerPhase(){\n        if(this.choicesModal.GetChoics() > -1){\n            this.resultModal.SetInfo(this.choicesModal.GetChoics(),this.quizComponent.GetQuizData());\n        }\n    }\n\n\n\n\n\n    // 出題\n    // 回答\n    // 答え合わせ\n}\n\n","import { _decorator, Component, Node, instantiate, Prefab, Canvas } from 'cc';\nimport { ChoicesModal } from '../Modal/ChoicesModal';\nimport { QuestionModal } from '../Modal/QuestionModal';\nimport { ResultModal } from '../Modal/ResultModal';\nconst { ccclass, property } = _decorator;\n\nconst ModalType = {\n    None     : 'None',\n    Question : 'Question',\n    Choices  : 'Choices',\n    Result   : 'Result',\n} as const;\n\nexport type ModalType = typeof ModalType[keyof typeof ModalType];\n\n@ccclass('QuizModalManager')\nexport class QuizModalManager extends Component {\n\n    private static instance : QuizModalManager;\n    \n    public static Instance() : QuizModalManager {\n        if(!QuizModalManager.instance){\n            QuizModalManager.instance = new QuizModalManager();\n        }\n\n        return QuizModalManager.instance;\n    }\n\n    @property(Node)\n    canvas : Node = null;\n    @property(Prefab)\n    private questionPrefab : Prefab = null;\n    @property(Prefab)\n    private choicesPrefab : Prefab = null;\n    @property(Prefab)\n    private resultPrefab : Prefab = null;\n\n    private question : QuestionModal = null;\n    private choices : ChoicesModal = null;\n    private result : ResultModal = null;\n\n    start() {\n        var temp = instantiate(this.questionPrefab);\n        temp.setParent(this.canvas);\n        this.question = temp.getComponent(QuestionModal);\n\n        temp = instantiate(this.choicesPrefab);\n        temp.setParent(this.canvas);\n        this.choices = temp.getComponent(ChoicesModal);\n\n        temp = instantiate(this.resultPrefab);\n        temp.setParent(this.canvas);\n        this.result = temp.getComponent(ResultModal);\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    public OnUpdate(deltaTime : number){\n        \n    }\n\n    public ChangeModal(nextType : ModalType){\n        if(nextType === 'Question'){\n            this.result.node.active = false;\n            this.question.node.active = true;\n        }\n        else if(nextType === 'Choices'){\n            this.question.node.active = false;\n            this.choices.node.active = true;\n        }\n        else if(nextType === 'Result'){\n            this.choices.node.active = false;\n            this.result.node.active = true;\n        }\n    }\n\n    public GetQuestionModal() : QuestionModal{\n        return this.question;\n    }\n    public GetChoicesModal() : ChoicesModal{\n        return this.choices;\n    }\n    public GetResultModal() : ResultModal{\n        return this.result;\n    }\n}\n\n","import { _decorator, Component, Node, Button, labelAssembler, Label, SpriteFrame, Color, Sprite } from 'cc';\nimport { QuizData } from '../QuizComponent';\nimport { QuizManager } from '../QuizManager';\nimport { QuestionModal } from './QuestionModal';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ResultModal')\nexport class ResultModal extends Component {\n\n    @property(Button)\n    private nextButton : Button = null;\n    @property(QuestionModal)\n    private questionModal : QuestionModal = null;\n    @property(Label)\n    private resultLabel : Label = null;\n    @property(Label)\n    private answerLabel : Label = null;\n    @property(Sprite)\n    private answerSprite : Sprite = null;\n\n    isReStart : boolean = false;\n\n\n    start() {\n        this.nextButton.node.on(Button.EventType.CLICK, function(){\n            this.node.active = false;\n            this.questionModal.node.active = true;\n            this.isReStart = true;\n        }, this)\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    public SetInfo(choice : number, data : QuizData){\n        if(choice === data.mAnswer){\n            this.resultLabel.string = \"正解\";\n            this.resultLabel.color = new Color(0,255,0,255);\n        }\n        else{\n            this.resultLabel.string = \"不正解\";\n            this.resultLabel.color = new Color(255,0,0,255);\n        }\n    }\n\n    public SetAnswerSprite(sprite : SpriteFrame){\n        this.answerSprite.spriteFrame = sprite;\n    }\n\n    public SetAnswerLabel(ansnum : number, label : string){\n        if(ansnum === 0){\n            this.answerLabel.string = \"A.\";\n        }\n        else if(ansnum === 1){\n            this.answerLabel.string = \"B.\";\n        }\n        else if(ansnum === 2){\n            this.answerLabel.string = \"C.\";\n        }\n        else if(ansnum === 3){\n            this.answerLabel.string = \"D.\";\n        }\n        else if(ansnum === 4){\n            this.answerLabel.string = \"E.\";\n        }\n        else if(ansnum === 5){\n            this.answerLabel.string = \"F.\";\n        }\n        this.answerLabel.string += label;\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Singleton')\nexport class Singleton{\n    private static instance : Singleton;\n    \n    private constructor(){\n\n    }\n\n    public static Instance() : Singleton {\n        if(!Singleton.instance){\n            Singleton.instance = new Singleton();\n        }\n\n        return Singleton.instance;\n    }\n\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n}\n\n","import { _decorator, Component, Node, Button, ButtonComponent, Enum, NodeEventType } from 'cc';\nimport { QuestionModal } from './Quiz/Modal/QuestionModal';\nimport { QuizComponent, QuizData, QuizType } from './Quiz/QuizComponent';\nconst { ccclass, property } = _decorator;\n\n@ccclass('TestMenu')\nexport class TestMenu extends Component {\n\n    @property(Button)\n    button : Array<Button> = new Array<Button>();\n    @property(QuestionModal)\n    modal : QuestionModal = null;\n\n    start() {\n        this.button[0].node.on(Button.EventType.CLICK, function(){this.ClickFunction('Gesture')},this);\n        this.button[1].node.on(Button.EventType.CLICK, function(){this.ClickFunction('Act')},this);\n        this.button[2].node.on(Button.EventType.CLICK, function(){this.ClickFunction('Quiz')},this);\n    }\n\n    private ClickFunction(name : string){\n        this.modal.Initialize(name);\n    }\n}\n\n"]}